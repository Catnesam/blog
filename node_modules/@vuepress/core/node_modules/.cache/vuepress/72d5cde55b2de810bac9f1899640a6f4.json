{"remainingRequest":"/Users/Mersace/Downloads/znote-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Mersace/Downloads/znote-master/docs/.vuepress/plugins/musicPlayer/bin/zw-player/player.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/Mersace/Downloads/znote-master/docs/.vuepress/plugins/musicPlayer/bin/zw-player/player.vue","mtime":1588202004000},{"path":"/Users/Mersace/Downloads/znote-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Mersace/Downloads/znote-master/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/Mersace/Downloads/znote-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Mersace/Downloads/znote-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}